#!/bin/sh -
#
# SPDX-FileCopyrightText: Copyright 2022, 2023 OK Ryoko
# SPDX-License-Identifier: MIT

set -o errexit
set -o nounset

# filter prints the lines in a sequence that match a pattern.
#
# Parameters:
#   $1: pattern, a regular expression string
#   $2: lines, a string consisting of newline-separated items
#
filter() {
	pattern="$1"; lines="$2"
	printf '%s\n' "$(
		echo "${lines}" | { grep -e "${pattern}" || test $? = 1; }
	)"
}

# Handle the case where there are no commits in the local repository
#
if git rev-parse --verify HEAD >/dev/null 2>&1
then against=HEAD
else against="$(git hash-object -t tree /dev/null)"; fi
readonly against

# Capture the names of all files in the index, exiting early if there
# are no changes
#
files="$(git diff --staged --name-only --diff-filter=ACMR "${against}")"
if [ -z "${files}" ]; then exit 0; fi
readonly files

# Check all Zig code and run the module tests
#
readonly zig_pattern='^examples/.*\.zig$\|^src/.*\.zig$\|^build\.zig$\|^build\.zig\.zon$'
zig_files="$(filter "${zig_pattern}" "${files}")"
if [ -n "${zig_files}" ]; then
	readonly zig_files
	# shellcheck disable=SC2086
	zig fmt --check $zig_files
	zig build
	zig build test
fi

# Check all changed Git hooks as POSIX shell scripts
#
readonly shell_pattern='^\.githooks/.*$'
shell_scripts="$(filter "${shell_pattern}" "${files}")"
if [ -n "${shell_scripts}" ]; then
	readonly shell_scripts
	# shellcheck disable=SC2086
	shellcheck --shell=sh ${shell_scripts}
fi

# Check all changed YAML files
#
readonly yaml_pattern='^\.github/.*\.yml$\|^\.yamllint$'
yaml_files="$(filter "${yaml_pattern}" "${files}")"
if [ -n "${yaml_files}" ]; then
	readonly yaml_files
	# shellcheck disable=SC2086
	yamllint --no-warnings ${yaml_files}
fi

exit 0
